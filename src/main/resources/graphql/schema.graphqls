type Query {
    pets: [Pet]
    findPets(filter: SearchFilter!) : [Pet]
    pet(id: ID!) : Pet
    findByOwners(owners: [String]!) : [Pet]
    hello: String
    # Only logged in users can query Orders
    myOrders: [Order]
}

type Mutation {
    changePetName(id: ID!, newName: String!): PetPayload
    # Only admins can delete
    deleteOrder(input: DeleteOrderInput!) : DeleteOrderPayload
}

type Subscription {
    helloReactive: String
}

input SearchFilter {
    name: String
    ownerId: String
}

input DeleteOrderInput {
    orderId: ID
}


interface Pet {
    id: ID!
    name: String
    owner: Person
}

type DeleteOrderPayload {
    success: Boolean
}

type Dog implements Pet {
    id: ID!
    name: String
    owner: Person
    doesBark: Boolean
}

type Cat implements Pet {
    id: ID!
    name: String
    owner: Person
    doesMeow: Boolean
}

type Person {
    firstName: String
    lastName: String
    bestFriend: Person
}

type PetPayload {
    pet: Pet
}

type Order {
    id: ID
    details: String
}

directive @cache(maxAge: Int) on FIELD
directive @instruction(instruction: String) on FIELD
